
//! Autogenerated weights for `pallet_acurast`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-21, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `jenova`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("acurast-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/acurast-node
// benchmark
// pallet
// --chain=acurast-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_acurast
// --extrinsic
// *
// --steps=50
// --repeat=20
// --output=./benchmarks/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_acurast`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::WeightInfo for WeightInfo<T> {
	/// Storage: Acurast LocalJobIdSequence (r:1 w:1)
	/// Proof: Acurast LocalJobIdSequence (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AcurastMarketplace StoredJobStatus (r:1 w:1)
	/// Proof: AcurastMarketplace StoredJobStatus (max_values: None, max_size: Some(34), added: 2509, mode: MaxEncodedLen)
	/// Storage: AcurastMarketplace StoredAdvertisementRestriction (r:1 w:0)
	/// Proof: AcurastMarketplace StoredAdvertisementRestriction (max_values: None, max_size: Some(3830), added: 6305, mode: MaxEncodedLen)
	/// Storage: AcurastMarketplace StoredAdvertisementPricing (r:1 w:0)
	/// Proof: AcurastMarketplace StoredAdvertisementPricing (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: AcurastMarketplace StoredStorageCapacity (r:1 w:1)
	/// Proof: AcurastMarketplace StoredStorageCapacity (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
	/// Storage: AcurastMarketplace StoredMatches (r:2 w:1)
	/// Proof: AcurastMarketplace StoredMatches (max_values: None, max_size: Some(231), added: 2706, mode: MaxEncodedLen)
	/// Storage: AcurastMarketplace StoredTotalAssignedV3 (r:1 w:1)
	/// Proof: AcurastMarketplace StoredTotalAssignedV3 (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AcurastMarketplace JobBudgets (r:1 w:1)
	/// Proof: AcurastMarketplace JobBudgets (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: AcurastMarketplace AssignedProcessors (r:0 w:1)
	/// Proof: AcurastMarketplace AssignedProcessors (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Acurast StoredJobRegistration (r:0 w:1)
	/// Proof: Acurast StoredJobRegistration (max_values: None, max_size: Some(34795), added: 37270, mode: MaxEncodedLen)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `710`
		//  Estimated: `35808`
		// Minimum execution time: 77_000_000 picoseconds.
		Weight::from_parts(78_000_000, 0)
			.saturating_add(Weight::from_parts(0, 35808))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: AcurastMarketplace StoredJobStatus (r:1 w:1)
	/// Proof: AcurastMarketplace StoredJobStatus (max_values: None, max_size: Some(34), added: 2509, mode: MaxEncodedLen)
	/// Storage: AcurastMarketplace JobBudgets (r:1 w:1)
	/// Proof: AcurastMarketplace JobBudgets (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Acurast StoredJobRegistration (r:0 w:1)
	/// Proof: Acurast StoredJobRegistration (max_values: None, max_size: Some(34795), added: 37270, mode: MaxEncodedLen)
	fn deregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `290`
		//  Estimated: `6996`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(23_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6996))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Acurast StoredJobRegistration (r:1 w:1)
	/// Proof: Acurast StoredJobRegistration (max_values: None, max_size: Some(34795), added: 37270, mode: MaxEncodedLen)
	/// Storage: AcurastMarketplace StoredJobStatus (r:1 w:0)
	/// Proof: AcurastMarketplace StoredJobStatus (max_values: None, max_size: Some(34), added: 2509, mode: MaxEncodedLen)
	/// The range of component `x` is `[1, 1000]`.
	fn update_allowed_sources(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `637`
		//  Estimated: `41759`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(24_000_000, 0)
			.saturating_add(Weight::from_parts(0, 41759))
			// Standard Error: 12_391
			.saturating_add(Weight::from_parts(1_109_995, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Acurast StoredRevokedCertificate (r:4 w:0)
	/// Proof: Acurast StoredRevokedCertificate (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: Acurast StoredAttestation (r:0 w:1)
	/// Proof: Acurast StoredAttestation (max_values: None, max_size: Some(11622), added: 14097, mode: MaxEncodedLen)
	fn submit_attestation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `250`
		//  Estimated: `12531`
		// Minimum execution time: 9_665_000_000 picoseconds.
		Weight::from_parts(9_709_000_000, 0)
			.saturating_add(Weight::from_parts(0, 12531))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Acurast StoredRevokedCertificate (r:0 w:1)
	/// Proof: Acurast StoredRevokedCertificate (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	fn update_certificate_revocation_list() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Acurast StoredJobRegistration (r:1 w:0)
	/// Proof: Acurast StoredJobRegistration (max_values: None, max_size: Some(34795), added: 37270, mode: MaxEncodedLen)
	/// Storage: Acurast ExecutionEnvironment (r:0 w:1)
	/// Proof: Acurast ExecutionEnvironment (max_values: None, max_size: Some(10743), added: 13218, mode: MaxEncodedLen)
	/// The range of component `x` is `[1, 10]`.
	fn set_environment(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `330`
		//  Estimated: `38260`
		// Minimum execution time: 27_500_000 picoseconds.
		Weight::from_parts(28_198_520, 0)
			.saturating_add(Weight::from_parts(0, 38260))
			// Standard Error: 4_614
			.saturating_add(Weight::from_parts(500_209, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Acurast StoredJobRegistration (r:1 w:0)
	/// Proof: Acurast StoredJobRegistration (max_values: None, max_size: Some(34795), added: 37270, mode: MaxEncodedLen)
	/// Storage: Acurast ExecutionEnvironment (r:0 w:1)
	/// Proof: Acurast ExecutionEnvironment (max_values: None, max_size: Some(10743), added: 13218, mode: MaxEncodedLen)
	/// The range of component `x` is `[1, 10]`.
	fn set_environments(_envs: u32, vars: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `330`
		//  Estimated: `38260`
		// Minimum execution time: 27_500_000 picoseconds.
		Weight::from_parts(28_198_520, 0)
			.saturating_add(Weight::from_parts(0, 38260))
			// Standard Error: 4_614
			.saturating_add(Weight::from_parts(500_209, 0).saturating_mul(vars.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
