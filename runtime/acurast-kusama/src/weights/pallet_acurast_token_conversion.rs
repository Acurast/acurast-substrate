
//! Autogenerated weights for `pallet_acurast_token_conversion`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.2.0
//! DATE: 2025-10-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `acurast-benchmark`, CPU: `AMD EPYC 7B13`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("acurast-kusama")`, DB CACHE: 1024

// Executed Command:
// /acurast-node
// benchmark
// pallet
// --chain=acurast-kusama
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// *
// --extrinsic
// *
// --steps=50
// --repeat=20
// --output=/benchmarks/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_acurast_token_conversion`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_acurast_token_conversion::WeightInfo for WeightInfo<T> {
	/// Storage: `AcurastTokenConversion::Enabled` (r:1 w:0)
	/// Proof: `AcurastTokenConversion::Enabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `AcurastTokenConversion::InitiatedConversion` (r:1 w:1)
	/// Proof: `AcurastTokenConversion::InitiatedConversion` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `AcurastHyperdriveIbc::OutgoingMessages` (r:1 w:1)
	/// Proof: `AcurastHyperdriveIbc::OutgoingMessages` (`max_values`: None, `max_size`: Some(1256), added: 3731, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `MaxEncodedLen`)
	/// Storage: `AcurastHyperdriveIbc::OutgoingMessagesLookup` (r:0 w:1)
	/// Proof: `AcurastHyperdriveIbc::OutgoingMessagesLookup` (`max_values`: None, `max_size`: Some(135), added: 2610, mode: `MaxEncodedLen`)
	fn convert() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `279`
		//  Estimated: `6196`
		// Minimum execution time: 153_680_000 picoseconds.
		Weight::from_parts(157_760_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `AcurastTokenConversion::LockedConversion` (r:1 w:1)
	/// Proof: `AcurastTokenConversion::LockedConversion` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(949), added: 3424, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `154`
		//  Estimated: `4764`
		// Minimum execution time: 60_111_000 picoseconds.
		Weight::from_parts(61_570_000, 0)
			.saturating_add(Weight::from_parts(0, 4764))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `AcurastTokenConversion::InitiatedConversion` (r:1 w:1)
	/// Proof: `AcurastTokenConversion::InitiatedConversion` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `AcurastHyperdriveIbc::OutgoingMessages` (r:1 w:1)
	/// Proof: `AcurastHyperdriveIbc::OutgoingMessages` (`max_values`: None, `max_size`: Some(1256), added: 3731, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `MaxEncodedLen`)
	/// Storage: `AcurastHyperdriveIbc::OutgoingMessagesLookup` (r:0 w:1)
	/// Proof: `AcurastHyperdriveIbc::OutgoingMessagesLookup` (`max_values`: None, `max_size`: Some(135), added: 2610, mode: `MaxEncodedLen`)
	fn retry_convert() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `688`
		//  Estimated: `4721`
		// Minimum execution time: 205_120_000 picoseconds.
		Weight::from_parts(209_430_000, 0)
			.saturating_add(Weight::from_parts(0, 4721))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `AcurastTokenConversion::InitiatedConversion` (r:1 w:1)
	/// Proof: `AcurastTokenConversion::InitiatedConversion` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `AcurastHyperdriveIbc::OutgoingMessages` (r:1 w:1)
	/// Proof: `AcurastHyperdriveIbc::OutgoingMessages` (`max_values`: None, `max_size`: Some(1256), added: 3731, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `MaxEncodedLen`)
	/// Storage: `AcurastHyperdriveIbc::OutgoingMessagesLookup` (r:0 w:1)
	/// Proof: `AcurastHyperdriveIbc::OutgoingMessagesLookup` (`max_values`: None, `max_size`: Some(135), added: 2610, mode: `MaxEncodedLen`)
	fn retry_convert_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `791`
		//  Estimated: `6196`
		// Minimum execution time: 211_060_000 picoseconds.
		Weight::from_parts(215_600_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	fn retry_process_conversion() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_550_000 picoseconds.
		Weight::from_parts(3_820_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn retry_process_conversion_for() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_680_000 picoseconds.
		Weight::from_parts(4_010_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `AcurastTokenConversion::Enabled` (r:0 w:1)
	/// Proof: `AcurastTokenConversion::Enabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_enabled() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_730_000 picoseconds.
		Weight::from_parts(3_960_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
