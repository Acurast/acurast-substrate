
//! Autogenerated weights for `pallet_acurast_vesting`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `acurast-benchmark`, CPU: `AMD EPYC 7B13`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("acurast-dev"), DB CACHE: 1024

// Executed Command:
// /acurast-node
// benchmark
// pallet
// --chain=acurast-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet-acurast-vesting
// --extrinsic
// *
// --steps=50
// --repeat=20
// --output=/benchmarks/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_acurast_vesting`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_acurast_vesting::WeightInfo for WeightInfo<T> {
	/// Storage: AcurastVesting VesterStates (r:1 w:1)
	/// Proof: AcurastVesting VesterStates (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// Storage: AcurastVesting Pool (r:1 w:1)
	/// Proof: AcurastVesting Pool (max_values: Some(1), max_size: Some(64), added: 559, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn vest() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `339`
		//  Estimated: `4764`
		// Minimum execution time: 55_980_000 picoseconds.
		Weight::from_parts(58_270_000, 0)
			.saturating_add(Weight::from_parts(0, 4764))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: AcurastVesting VesterStates (r:1 w:1)
	/// Proof: AcurastVesting VesterStates (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// Storage: AcurastVesting Pool (r:1 w:1)
	/// Proof: AcurastVesting Pool (max_values: Some(1), max_size: Some(64), added: 559, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:0)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegatorState (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	fn revest() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `954`
		//  Estimated: `4764`
		// Minimum execution time: 66_950_000 picoseconds.
		Weight::from_parts(67_830_000, 0)
			.saturating_add(Weight::from_parts(0, 4764))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: AcurastVesting VesterStates (r:1 w:1)
	/// Proof: AcurastVesting VesterStates (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// Storage: AcurastVesting Pool (r:1 w:1)
	/// Proof: AcurastVesting Pool (max_values: Some(1), max_size: Some(64), added: 559, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:0)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	fn cooldown() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `781`
		//  Estimated: `4246`
		// Minimum execution time: 35_700_000 picoseconds.
		Weight::from_parts(37_150_000, 0)
			.saturating_add(Weight::from_parts(0, 4246))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: AcurastVesting VesterStates (r:1 w:1)
	/// Proof: AcurastVesting VesterStates (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// Storage: AcurastVesting Pool (r:1 w:0)
	/// Proof: AcurastVesting Pool (max_values: Some(1), max_size: Some(64), added: 559, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:0)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegatorState (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn divest() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `958`
		//  Estimated: `4764`
		// Minimum execution time: 85_280_000 picoseconds.
		Weight::from_parts(86_520_000, 0)
			.saturating_add(Weight::from_parts(0, 4764))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: AcurastVesting VesterStates (r:1 w:1)
	/// Proof: AcurastVesting VesterStates (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// Storage: AcurastVesting Pool (r:1 w:0)
	/// Proof: AcurastVesting Pool (max_values: Some(1), max_size: Some(64), added: 559, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:0)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegatorState (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn kick_out() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `958`
		//  Estimated: `4764`
		// Minimum execution time: 85_010_000 picoseconds.
		Weight::from_parts(86_441_000, 0)
			.saturating_add(Weight::from_parts(0, 4764))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: AcurastVesting Pool (r:1 w:1)
	/// Proof: AcurastVesting Pool (max_values: Some(1), max_size: Some(64), added: 559, mode: MaxEncodedLen)
	fn distribute_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `129`
		//  Estimated: `1549`
		// Minimum execution time: 14_120_000 picoseconds.
		Weight::from_parts(14_530_000, 0)
			.saturating_add(Weight::from_parts(0, 1549))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
