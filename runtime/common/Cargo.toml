[package]
name = "acurast-runtime-common"
authors = { workspace = true }
description = "Acurast Common Configuration for runtime and node (#nostd)"
version = { workspace = true }
license = "Unlicense"
keywords = ["no_std", "no-std"]
categories = ["no-std"]
homepage = "https://docs.acurast.com/"
edition = "2021"
publish = false
repository = "https://github.com/acurast/"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[build-dependencies]
substrate-wasm-builder = { workspace = true }

[dependencies]
parity-scale-codec = { workspace = true }
hex-literal = { workspace = true, optional = true }
log = { workspace = true }
scale-info = { workspace = true }
smallvec = { workspace = true }
derive_more = { workspace = true }
serde = { version = "1.0.136", optional = true, features = ["derive"] }

# Acurast
pallet-acurast = { workspace = true }
pallet-acurast-marketplace = { workspace = true }
pallet-acurast-fee-manager = { workspace = true }
acurast-p256-crypto = { workspace = true }
pallet-acurast-assets-manager = { workspace = true }
pallet-acurast-processor-manager = { workspace = true }
pallet-acurast-hyperdrive = { workspace = true }
pallet-acurast-hyperdrive-outgoing = { workspace = true }
pallet-parachain-staking = { workspace = true }

# Nimbus Dependencies
nimbus-primitives = { workspace = true }

# Substrate
frame-benchmarking = { workspace = true, optional = true }
frame-executive = { workspace = true }
frame-support = { workspace = true }
frame-system = { workspace = true }
frame-system-benchmarking = { workspace = true, optional = true }
frame-system-rpc-runtime-api = { workspace = true }
frame-try-runtime = { workspace = true, optional = true }
pallet-assets = { workspace = true }
pallet-aura = { workspace = true }
pallet-authorship = { workspace = true }
pallet-balances = { workspace = true }
pallet-session = { workspace = true }
pallet-sudo = { workspace = true }
pallet-democracy = { workspace = true }
pallet-timestamp = { workspace = true }
pallet-transaction-payment = { workspace = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }
pallet-uniques = { workspace = true }
pallet-multisig = { workspace = true }
sp-api = { workspace = true }
sp-block-builder = { workspace = true }
sp-consensus-aura = { workspace = true }
sp-core = { workspace = true }
sp-inherents = { workspace = true }
sp-io = { workspace = true }
sp-offchain = { workspace = true }
sp-runtime = { workspace = true }
sp-session = { workspace = true }
sp-std = { workspace = true }
sp-transaction-pool = { workspace = true }
sp-version = { workspace = true }
pallet-scheduler = { workspace = true }
pallet-preimage = { workspace = true }

# Polkadot
pallet-xcm = { workspace = true }
polkadot-parachain = { workspace = true }
polkadot-runtime-common = { workspace = true }
xcm = { workspace = true }
xcm-builder = { workspace = true }
xcm-executor = { workspace = true }
polkadot-core-primitives = { workspace = true }

# Cumulus
cumulus-pallet-aura-ext = { workspace = true }
cumulus-pallet-dmp-queue = { workspace = true }
cumulus-pallet-parachain-system = { workspace = true }
cumulus-pallet-session-benchmarking = { workspace = true }
cumulus-pallet-xcm = { workspace = true }
cumulus-pallet-xcmp-queue = { workspace = true }
cumulus-primitives-core = { workspace = true }
cumulus-primitives-timestamp = { workspace = true }
cumulus-primitives-utility = { workspace = true }
pallet-collator-selection = { workspace = true }
parachain-info = { workspace = true }
parachains-common = { workspace = true }

[features]
default = [
	"std",
]
std = [
	"parity-scale-codec/std",
	"log/std",
	"scale-info/std",
	"cumulus-pallet-aura-ext/std",
	"cumulus-pallet-dmp-queue/std",
	"cumulus-pallet-parachain-system/std",
	"cumulus-pallet-xcm/std",
	"cumulus-pallet-xcmp-queue/std",
	"cumulus-primitives-core/std",
	"cumulus-primitives-timestamp/std",
	"cumulus-primitives-utility/std",
	"frame-executive/std",
	"frame-support/std",
	"frame-system-rpc-runtime-api/std",
	"frame-system/std",
	"pallet-aura/std",
	"pallet-authorship/std",
	"pallet-balances/std",
	"pallet-collator-selection/std",
	"pallet-session/std",
	"pallet-sudo/std",
	"pallet-democracy/std",
	"pallet-timestamp/std",
	"pallet-transaction-payment-rpc-runtime-api/std",
	"pallet-transaction-payment/std",
	"pallet-xcm/std",
	"pallet-assets/std",
	"pallet-scheduler/std",
	"pallet-preimage/std",
	"pallet-uniques/std",
	"pallet-acurast/std",
	"pallet-acurast-fee-manager/std",
	"pallet-acurast-marketplace/std",
	"pallet-acurast-processor-manager/std",
	"pallet-acurast-hyperdrive/std",
	"pallet-acurast-hyperdrive-outgoing/std",
	"parachain-info/std",
	"polkadot-parachain/std",
	"polkadot-runtime-common/std",
	"sp-api/std",
	"sp-block-builder/std",
	"sp-consensus-aura/std",
	"sp-core/std",
	"sp-inherents/std",
	"sp-io/std",
	"sp-offchain/std",
	"sp-runtime/std",
	"sp-session/std",
	"sp-std/std",
	"sp-transaction-pool/std",
	"sp-version/std",
	"xcm-builder/std",
	"xcm-executor/std",
	"xcm/std",
	"acurast-p256-crypto/std",
	"serde",
]

runtime-benchmarks = [
	"hex-literal",
	"frame-system-benchmarking",
	"frame-benchmarking/runtime-benchmarks",
	"frame-support/runtime-benchmarks",
	"frame-system-benchmarking/runtime-benchmarks",
	"frame-system/runtime-benchmarks",
	"pallet-assets/runtime-benchmarks",
	"pallet-balances/runtime-benchmarks",
	"pallet-collator-selection/runtime-benchmarks",
	"pallet-democracy/runtime-benchmarks",
	"pallet-acurast/runtime-benchmarks",
	"pallet-acurast-marketplace/runtime-benchmarks",
	"pallet-acurast-fee-manager/runtime-benchmarks",
	"pallet-acurast-processor-manager/runtime-benchmarks",
	"pallet-acurast-hyperdrive/runtime-benchmarks",
	"pallet-acurast-hyperdrive-outgoing/runtime-benchmarks",
	"pallet-timestamp/runtime-benchmarks",
	"pallet-xcm/runtime-benchmarks",
	"pallet-uniques/runtime-benchmarks",
	"sp-runtime/runtime-benchmarks",
	"xcm-builder/runtime-benchmarks",
	"cumulus-pallet-session-benchmarking/runtime-benchmarks",
	"cumulus-pallet-xcmp-queue/runtime-benchmarks",
]

try-runtime = [
	"frame-executive/try-runtime",
	"nimbus-primitives/try-runtime",
	"frame-try-runtime",
]

emulation = []
