
//! Autogenerated weights for `pallet_acurast_hyperdrive_outgoing`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `acurast-benchmark`, CPU: `AMD EPYC 7B13`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("acurast-kusama"), DB CACHE: 1024

// Executed Command:
// /acurast-node
// benchmark
// pallet
// --chain=acurast-kusama
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// *
// --extrinsic
// *
// --steps=50
// --repeat=20
// --output=/benchmarks/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_acurast_hyperdrive_outgoing`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_acurast_hyperdrive_outgoing::WeightInfo for WeightInfo<T> {
	/// Storage: AcurastHyperdriveOutgoingTezos NumberOfLeaves (r:1 w:1)
	/// Proof: AcurastHyperdriveOutgoingTezos NumberOfLeaves (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AcurastHyperdriveOutgoingTezos MessageNumbers (r:1 w:1)
	/// Proof: AcurastHyperdriveOutgoingTezos MessageNumbers (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: AcurastHyperdriveOutgoingTezos Nodes (r:8 w:4)
	/// Proof: AcurastHyperdriveOutgoingTezos Nodes (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
	/// Storage: System ParentHash (r:1 w:0)
	/// Proof: System ParentHash (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: AcurastHyperdriveOutgoingTezos LeafMeta (r:0 w:2)
	/// Proof: AcurastHyperdriveOutgoingTezos LeafMeta (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	/// Storage: AcurastHyperdriveOutgoingTezos RootHash (r:0 w:1)
	/// Proof: AcurastHyperdriveOutgoingTezos RootHash (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `x` is `[1, 1000]`.
	fn send_message(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `311`
		//  Estimated: `9941 + x * (7 Â±0)`
		// Minimum execution time: 69_330_000 picoseconds.
		Weight::from_parts(101_119_249, 0)
			.saturating_add(Weight::from_parts(0, 9941))
			// Standard Error: 1_658
			.saturating_add(Weight::from_parts(31_485, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 7).saturating_mul(x.into()))
	}
}
