
//! Autogenerated weights for `pallet_acurast_compute`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.2.0
//! DATE: 2025-10-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `acurast-benchmark`, CPU: `AMD EPYC 7B13`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("acurast-kusama")`, DB CACHE: 1024

// Executed Command:
// /acurast-node
// benchmark
// pallet
// --chain=acurast-kusama
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// *
// --extrinsic
// *
// --steps=50
// --repeat=20
// --output=/benchmarks/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_acurast_compute`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_acurast_compute::WeightInfo for WeightInfo<T> {
	/// Storage: `AcurastCompute::MetricPoolLookup` (r:1 w:1)
	/// Proof: `AcurastCompute::MetricPoolLookup` (`max_values`: None, `max_size`: Some(25), added: 2500, mode: `MaxEncodedLen`)
	/// Storage: `AcurastCompute::LastMetricPoolId` (r:1 w:1)
	/// Proof: `AcurastCompute::LastMetricPoolId` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `AcurastCompute::MetricPools` (r:0 w:1)
	/// Proof: `AcurastCompute::MetricPools` (`max_values`: None, `max_size`: Some(1219), added: 3694, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 20]`.
	fn create_pool(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
		//  Estimated: `3490`
		// Minimum execution time: 17_800_000 picoseconds.
		Weight::from_parts(18_875_309, 0)
			.saturating_add(Weight::from_parts(0, 3490))
			// Standard Error: 2_584
			.saturating_add(Weight::from_parts(38_009, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `AcurastCompute::MetricPools` (r:1 w:1)
	/// Proof: `AcurastCompute::MetricPools` (`max_values`: None, `max_size`: Some(1219), added: 3694, mode: `MaxEncodedLen`)
	/// Storage: `AcurastCompute::MetricPoolLookup` (r:1 w:2)
	/// Proof: `AcurastCompute::MetricPoolLookup` (`max_values`: None, `max_size`: Some(25), added: 2500, mode: `MaxEncodedLen`)
	/// Storage: `AcurastCompute::CurrentCycle` (r:1 w:0)
	/// Proof: `AcurastCompute::CurrentCycle` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn modify_pool_same_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1478`
		//  Estimated: `4684`
		// Minimum execution time: 19_680_000 picoseconds.
		Weight::from_parts(20_649_000, 0)
			.saturating_add(Weight::from_parts(0, 4684))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `AcurastCompute::MetricPools` (r:1 w:1)
	/// Proof: `AcurastCompute::MetricPools` (`max_values`: None, `max_size`: Some(1219), added: 3694, mode: `MaxEncodedLen`)
	/// Storage: `AcurastCompute::MetricPoolLookup` (r:1 w:2)
	/// Proof: `AcurastCompute::MetricPoolLookup` (`max_values`: None, `max_size`: Some(25), added: 2500, mode: `MaxEncodedLen`)
	/// Storage: `AcurastCompute::CurrentCycle` (r:1 w:0)
	/// Proof: `AcurastCompute::CurrentCycle` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 20]`.
	fn modify_pool_replace_config(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1478`
		//  Estimated: `4684`
		// Minimum execution time: 19_509_000 picoseconds.
		Weight::from_parts(20_439_038, 0)
			.saturating_add(Weight::from_parts(0, 4684))
			// Standard Error: 2_023
			.saturating_add(Weight::from_parts(7_326, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `AcurastCompute::MetricPools` (r:1 w:1)
	/// Proof: `AcurastCompute::MetricPools` (`max_values`: None, `max_size`: Some(1219), added: 3694, mode: `MaxEncodedLen`)
	/// Storage: `AcurastCompute::MetricPoolLookup` (r:1 w:2)
	/// Proof: `AcurastCompute::MetricPoolLookup` (`max_values`: None, `max_size`: Some(25), added: 2500, mode: `MaxEncodedLen`)
	/// Storage: `AcurastCompute::CurrentCycle` (r:1 w:0)
	/// Proof: `AcurastCompute::CurrentCycle` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 20]`.
	fn modify_pool_update_config(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1478`
		//  Estimated: `4684`
		// Minimum execution time: 21_510_000 picoseconds.
		Weight::from_parts(24_463_157, 0)
			.saturating_add(Weight::from_parts(0, 4684))
			// Standard Error: 6_120
			.saturating_add(Weight::from_parts(166_658, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Uniques::Account` (r:2 w:0)
	/// Proof: `Uniques::Account` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// Storage: `AcurastCompute::BackingOffers` (r:0 w:1)
	/// Proof: `AcurastCompute::BackingOffers` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn offer_backing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `380`
		//  Estimated: `6164`
		// Minimum execution time: 26_820_000 picoseconds.
		Weight::from_parts(27_700_000, 0)
			.saturating_add(Weight::from_parts(0, 6164))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AcurastCompute::BackingOffers` (r:1 w:1)
	/// Proof: `AcurastCompute::BackingOffers` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn withdraw_backing_offer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `250`
		//  Estimated: `3513`
		// Minimum execution time: 15_550_000 picoseconds.
		Weight::from_parts(16_090_000, 0)
			.saturating_add(Weight::from_parts(0, 3513))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Uniques::Account` (r:2 w:1)
	/// Proof: `Uniques::Account` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// Storage: `AcurastCompute::BackingOffers` (r:1 w:1)
	/// Proof: `AcurastCompute::BackingOffers` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `AcurastCompute::NextCommitmentId` (r:1 w:1)
	/// Proof: `AcurastCompute::NextCommitmentId` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Uniques::Class` (r:1 w:1)
	/// Proof: `Uniques::Class` (`max_values`: None, `max_size`: Some(190), added: 2665, mode: `MaxEncodedLen`)
	/// Storage: `Uniques::Asset` (r:1 w:1)
	/// Proof: `Uniques::Asset` (`max_values`: None, `max_size`: Some(146), added: 2621, mode: `MaxEncodedLen`)
	/// Storage: `Uniques::CollectionMaxSupply` (r:1 w:0)
	/// Proof: `Uniques::CollectionMaxSupply` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `AcurastCompute::BackingLookup` (r:0 w:1)
	/// Proof: `AcurastCompute::BackingLookup` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `AcurastCompute::Backings` (r:0 w:1)
	/// Proof: `AcurastCompute::Backings` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Uniques::ClassAccount` (r:0 w:1)
	/// Proof: `Uniques::ClassAccount` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn accept_backing_offer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `628`
		//  Estimated: `6164`
		// Minimum execution time: 74_020_000 picoseconds.
		Weight::from_parts(75_860_000, 0)
			.saturating_add(Weight::from_parts(0, 6164))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(8))
	}

	fn delegate() -> Weight {
			// Proof Size summary in bytes:
			//  Measured:  `1381`
			//  Estimated: `4668`
			// Minimum execution time: 12_000_000 picoseconds.
			Weight::from_parts(13_000_000, 0)
				.saturating_add(Weight::from_parts(0, 4668))
				.saturating_add(T::DbWeight::get().reads(1))
				.saturating_add(T::DbWeight::get().writes(3))
	}
    fn cooldown_delegation() -> Weight {
			// Proof Size summary in bytes:
			//  Measured:  `1381`
			//  Estimated: `4668`
			// Minimum execution time: 12_000_000 picoseconds.
			Weight::from_parts(13_000_000, 0)
				.saturating_add(Weight::from_parts(0, 4668))
				.saturating_add(T::DbWeight::get().reads(1))
				.saturating_add(T::DbWeight::get().writes(3))
	}
    fn redelegate() -> Weight {
			// Proof Size summary in bytes:
			//  Measured:  `1381`
			//  Estimated: `4668`
			// Minimum execution time: 12_000_000 picoseconds.
			Weight::from_parts(13_000_000, 0)
				.saturating_add(Weight::from_parts(0, 4668))
				.saturating_add(T::DbWeight::get().reads(1))
				.saturating_add(T::DbWeight::get().writes(3))
	}
     fn end_delegation() -> Weight {
			// Proof Size summary in bytes:
			//  Measured:  `1381`
			//  Estimated: `4668`
			// Minimum execution time: 12_000_000 picoseconds.
			Weight::from_parts(13_000_000, 0)
				.saturating_add(Weight::from_parts(0, 4668))
				.saturating_add(T::DbWeight::get().reads(1))
				.saturating_add(T::DbWeight::get().writes(3))
	}
    fn commit_compute() -> Weight {
			// Proof Size summary in bytes:
			//  Measured:  `1381`
			//  Estimated: `4668`
			// Minimum execution time: 12_000_000 picoseconds.
			Weight::from_parts(13_000_000, 0)
				.saturating_add(Weight::from_parts(0, 4668))
				.saturating_add(T::DbWeight::get().reads(1))
				.saturating_add(T::DbWeight::get().writes(3))
	}
    fn stake_more() -> Weight {
			// Proof Size summary in bytes:
			//  Measured:  `1381`
			//  Estimated: `4668`
			// Minimum execution time: 12_000_000 picoseconds.
			Weight::from_parts(13_000_000, 0)
				.saturating_add(Weight::from_parts(0, 4668))
				.saturating_add(T::DbWeight::get().reads(1))
				.saturating_add(T::DbWeight::get().writes(3))
	}
    fn cooldown_compute_commitment() -> Weight {
			// Proof Size summary in bytes:
			//  Measured:  `1381`
			//  Estimated: `4668`
			// Minimum execution time: 12_000_000 picoseconds.
			Weight::from_parts(13_000_000, 0)
				.saturating_add(Weight::from_parts(0, 4668))
				.saturating_add(T::DbWeight::get().reads(1))
				.saturating_add(T::DbWeight::get().writes(3))
	}
    fn end_compute_commitment() -> Weight {
			// Proof Size summary in bytes:
			//  Measured:  `1381`
			//  Estimated: `4668`
			// Minimum execution time: 12_000_000 picoseconds.
			Weight::from_parts(13_000_000, 0)
				.saturating_add(Weight::from_parts(0, 4668))
				.saturating_add(T::DbWeight::get().reads(1))
				.saturating_add(T::DbWeight::get().writes(3))
	}
    fn reward() -> Weight {
			// Proof Size summary in bytes:
			//  Measured:  `1381`
			//  Estimated: `4668`
			// Minimum execution time: 12_000_000 picoseconds.
			Weight::from_parts(13_000_000, 0)
				.saturating_add(Weight::from_parts(0, 4668))
				.saturating_add(T::DbWeight::get().reads(1))
				.saturating_add(T::DbWeight::get().writes(3))
	}
    fn slash() -> Weight {
			// Proof Size summary in bytes:
			//  Measured:  `1381`
			//  Estimated: `4668`
			// Minimum execution time: 12_000_000 picoseconds.
			Weight::from_parts(13_000_000, 0)
				.saturating_add(Weight::from_parts(0, 4668))
				.saturating_add(T::DbWeight::get().reads(1))
				.saturating_add(T::DbWeight::get().writes(3))
	}
    fn withdraw_delegation() -> Weight {
			// Proof Size summary in bytes:
			//  Measured:  `1381`
			//  Estimated: `4668`
			// Minimum execution time: 12_000_000 picoseconds.
			Weight::from_parts(13_000_000, 0)
				.saturating_add(Weight::from_parts(0, 4668))
				.saturating_add(T::DbWeight::get().reads(3))
				.saturating_add(T::DbWeight::get().writes(3))
	}
    fn withdraw_commitment() -> Weight {
			// Proof Size summary in bytes:
			//  Measured:  `1381`
			//  Estimated: `4668`
			// Minimum execution time: 12_000_000 picoseconds.
			Weight::from_parts(13_000_000, 0)
				.saturating_add(Weight::from_parts(0, 4668))
				.saturating_add(T::DbWeight::get().reads(3))
				.saturating_add(T::DbWeight::get().writes(3))
	}

	fn delegate_more() -> Weight {
			// Proof Size summary in bytes:
			//  Measured:  `1381`
			//  Estimated: `4668`
			// Minimum execution time: 12_000_000 picoseconds.
			Weight::from_parts(13_000_000, 0)
				.saturating_add(Weight::from_parts(0, 4668))
				.saturating_add(T::DbWeight::get().reads(3))
				.saturating_add(T::DbWeight::get().writes(3))
	}

	fn compound_delegation() -> Weight {
			// Proof Size summary in bytes:
			//  Measured:  `1381`
			//  Estimated: `4668`
			// Minimum execution time: 15_000_000 picoseconds.
			Weight::from_parts(16_000_000, 0)
				.saturating_add(Weight::from_parts(0, 4668))
				.saturating_add(T::DbWeight::get().reads(4))
				.saturating_add(T::DbWeight::get().writes(5))
	}

	fn compound_stake() -> Weight {
			// Proof Size summary in bytes:
			//  Measured:  `1381`
			//  Estimated: `4668`
			// Minimum execution time: 15_000_000 picoseconds.
			Weight::from_parts(16_000_000, 0)
				.saturating_add(Weight::from_parts(0, 4668))
				.saturating_add(T::DbWeight::get().reads(4))
				.saturating_add(T::DbWeight::get().writes(5))
	}
}
