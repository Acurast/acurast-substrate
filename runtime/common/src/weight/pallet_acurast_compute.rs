
//! Autogenerated weights for `pallet_acurast_compute`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-02-27, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `acurast-benchmark`, CPU: `AMD EPYC 7B13`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("acurast-dev")`, DB CACHE: 1024

// Executed Command:
// /acurast-node
// benchmark
// pallet
// --chain=acurast-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// *
// --extrinsic
// *
// --steps=50
// --repeat=20
// --output=/benchmarks/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_acurast_compute`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_acurast_compute::WeightInfo for WeightInfo<T> {
	/// Storage: `AcurastCompute::MetricPoolLookup` (r:1 w:1)
	/// Proof: `AcurastCompute::MetricPoolLookup` (`max_values`: None, `max_size`: Some(25), added: 2500, mode: `MaxEncodedLen`)
	/// Storage: `AcurastCompute::LastMetricPoolId` (r:1 w:1)
	/// Proof: `AcurastCompute::LastMetricPoolId` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `AcurastCompute::MetricPools` (r:0 w:1)
	/// Proof: `AcurastCompute::MetricPools` (`max_values`: None, `max_size`: Some(1203), added: 3678, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 20]`.
	fn create_pool(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3490`
		// Minimum execution time: 17_520_000 picoseconds.
		Weight::from_parts(18_468_620, 0)
			.saturating_add(Weight::from_parts(0, 3490))
			// Standard Error: 1_710
			.saturating_add(Weight::from_parts(42_213, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `AcurastCompute::MetricPools` (r:1 w:1)
	/// Proof: `AcurastCompute::MetricPools` (`max_values`: None, `max_size`: Some(1203), added: 3678, mode: `MaxEncodedLen`)
	/// Storage: `AcurastCompute::MetricPoolLookup` (r:1 w:2)
	/// Proof: `AcurastCompute::MetricPoolLookup` (`max_values`: None, `max_size`: Some(25), added: 2500, mode: `MaxEncodedLen`)
	fn modify_pool_same_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1393`
		//  Estimated: `4668`
		// Minimum execution time: 19_480_000 picoseconds.
		Weight::from_parts(20_020_000, 0)
			.saturating_add(Weight::from_parts(0, 4668))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `AcurastCompute::MetricPools` (r:1 w:1)
	/// Proof: `AcurastCompute::MetricPools` (`max_values`: None, `max_size`: Some(1203), added: 3678, mode: `MaxEncodedLen`)
	/// Storage: `AcurastCompute::MetricPoolLookup` (r:1 w:2)
	/// Proof: `AcurastCompute::MetricPoolLookup` (`max_values`: None, `max_size`: Some(25), added: 2500, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 20]`.
	fn modify_pool_replace_config(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1393`
		//  Estimated: `4668`
		// Minimum execution time: 19_020_000 picoseconds.
		Weight::from_parts(20_004_095, 0)
			.saturating_add(Weight::from_parts(0, 4668))
			// Standard Error: 3_629
			.saturating_add(Weight::from_parts(1_666, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `AcurastCompute::MetricPools` (r:1 w:1)
	/// Proof: `AcurastCompute::MetricPools` (`max_values`: None, `max_size`: Some(1203), added: 3678, mode: `MaxEncodedLen`)
	/// Storage: `AcurastCompute::MetricPoolLookup` (r:1 w:2)
	/// Proof: `AcurastCompute::MetricPoolLookup` (`max_values`: None, `max_size`: Some(25), added: 2500, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[0, 20]`.
	fn modify_pool_update_config(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1393`
		//  Estimated: `4668`
		// Minimum execution time: 20_980_000 picoseconds.
		Weight::from_parts(23_789_366, 0)
			.saturating_add(Weight::from_parts(0, 4668))
			// Standard Error: 6_880
			.saturating_add(Weight::from_parts(178_012, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
