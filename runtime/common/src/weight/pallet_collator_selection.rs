//
// //! Autogenerated weights for `pallet_collator_selection`
// //!
// //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
// //! DATE: 2023-08-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
// //! WORST CASE MAP SIZE: `1000000`
// //! HOSTNAME: `acurast-benchmark`, CPU: `AMD EPYC 7B13`
// //! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("acurast-kusama"), DB CACHE: 1024
//
// // Executed Command:
// // /acurast-node
// // benchmark
// // pallet
// // --chain=acurast-kusama
// // --execution=wasm
// // --wasm-execution=compiled
// // --pallet
// // *
// // --extrinsic
// // *
// // --steps=50
// // --repeat=20
// // --output=/benchmarks/
//
// #![cfg_attr(rustfmt, rustfmt_skip)]
// #![allow(unused_parens)]
// #![allow(unused_imports)]
// #![allow(missing_docs)]
//
// use frame_support::{traits::Get, weights::Weight};
// use core::marker::PhantomData;
//
// /// Weight functions for `pallet_collator_selection`.
// pub struct WeightInfo<T>(PhantomData<T>);
// impl<T: frame_system::Config> pallet_collator_selection::WeightInfo for WeightInfo<T> {
// 	/// Storage: Session NextKeys (r:100 w:0)
// 	/// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
// 	/// Storage: CollatorSelection Invulnerables (r:0 w:1)
// 	/// Proof: CollatorSelection Invulnerables (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
// 	/// The range of component `b` is `[1, 100]`.
// 	fn set_invulnerables(b: u32, ) -> Weight {
// 		// Proof Size summary in bytes:
// 		//  Measured:  `276 + b * (78 ±0)`
// 		//  Estimated: `1267 + b * (2554 ±0)`
// 		// Minimum execution time: 22_220_000 picoseconds.
// 		Weight::from_parts(20_144_110, 0)
// 			.saturating_add(Weight::from_parts(0, 1267))
// 			// Standard Error: 3_130
// 			.saturating_add(Weight::from_parts(4_249_632, 0).saturating_mul(b.into()))
// 			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
// 			.saturating_add(T::DbWeight::get().writes(1))
// 			.saturating_add(Weight::from_parts(0, 2554).saturating_mul(b.into()))
// 	}
// 	/// Storage: CollatorSelection DesiredCandidates (r:0 w:1)
// 	/// Proof: CollatorSelection DesiredCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
// 	fn set_desired_candidates() -> Weight {
// 		// Proof Size summary in bytes:
// 		//  Measured:  `0`
// 		//  Estimated: `0`
// 		// Minimum execution time: 11_600_000 picoseconds.
// 		Weight::from_parts(12_000_000, 0)
// 			.saturating_add(Weight::from_parts(0, 0))
// 			.saturating_add(T::DbWeight::get().writes(1))
// 	}
// 	/// Storage: CollatorSelection CandidacyBond (r:0 w:1)
// 	/// Proof: CollatorSelection CandidacyBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
// 	fn set_candidacy_bond() -> Weight {
// 		// Proof Size summary in bytes:
// 		//  Measured:  `0`
// 		//  Estimated: `0`
// 		// Minimum execution time: 11_550_000 picoseconds.
// 		Weight::from_parts(12_170_000, 0)
// 			.saturating_add(Weight::from_parts(0, 0))
// 			.saturating_add(T::DbWeight::get().writes(1))
// 	}
// 	/// Storage: CollatorSelection Candidates (r:1 w:1)
// 	/// Proof: CollatorSelection Candidates (max_values: Some(1), max_size: Some(48002), added: 48497, mode: MaxEncodedLen)
// 	/// Storage: CollatorSelection DesiredCandidates (r:1 w:0)
// 	/// Proof: CollatorSelection DesiredCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
// 	/// Storage: CollatorSelection Invulnerables (r:1 w:0)
// 	/// Proof: CollatorSelection Invulnerables (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
// 	/// Storage: Session NextKeys (r:1 w:0)
// 	/// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
// 	/// Storage: CollatorSelection CandidacyBond (r:1 w:0)
// 	/// Proof: CollatorSelection CandidacyBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
// 	/// Storage: CollatorSelection LastAuthoredBlock (r:0 w:1)
// 	/// Proof: CollatorSelection LastAuthoredBlock (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
// 	/// The range of component `c` is `[1, 999]`.
// 	fn register_as_candidate(c: u32, ) -> Weight {
// 		// Proof Size summary in bytes:
// 		//  Measured:  `1206 + c * (48 ±0)`
// 		//  Estimated: `49487 + c * (49 ±0)`
// 		// Minimum execution time: 65_540_000 picoseconds.
// 		Weight::from_parts(71_323_152, 0)
// 			.saturating_add(Weight::from_parts(0, 49487))
// 			// Standard Error: 763
// 			.saturating_add(Weight::from_parts(73_769, 0).saturating_mul(c.into()))
// 			.saturating_add(T::DbWeight::get().reads(5))
// 			.saturating_add(T::DbWeight::get().writes(2))
// 			.saturating_add(Weight::from_parts(0, 49).saturating_mul(c.into()))
// 	}
// 	/// Storage: CollatorSelection Candidates (r:1 w:1)
// 	/// Proof: CollatorSelection Candidates (max_values: Some(1), max_size: Some(48002), added: 48497, mode: MaxEncodedLen)
// 	/// Storage: CollatorSelection LastAuthoredBlock (r:0 w:1)
// 	/// Proof: CollatorSelection LastAuthoredBlock (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
// 	/// The range of component `c` is `[6, 1000]`.
// 	fn leave_intent(c: u32, ) -> Weight {
// 		// Proof Size summary in bytes:
// 		//  Measured:  `465 + c * (48 ±0)`
// 		//  Estimated: `49487`
// 		// Minimum execution time: 50_620_000 picoseconds.
// 		Weight::from_parts(51_929_015, 0)
// 			.saturating_add(Weight::from_parts(0, 49487))
// 			// Standard Error: 864
// 			.saturating_add(Weight::from_parts(74_260, 0).saturating_mul(c.into()))
// 			.saturating_add(T::DbWeight::get().reads(1))
// 			.saturating_add(T::DbWeight::get().writes(2))
// 	}
// 	/// Storage: System Account (r:2 w:2)
// 	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
// 	/// Storage: System BlockWeight (r:1 w:1)
// 	/// Proof: System BlockWeight (max_values: Some(1), max_size: Some(48), added: 543, mode: MaxEncodedLen)
// 	/// Storage: CollatorSelection LastAuthoredBlock (r:0 w:1)
// 	/// Proof: CollatorSelection LastAuthoredBlock (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
// 	fn note_author() -> Weight {
// 		// Proof Size summary in bytes:
// 		//  Measured:  `140`
// 		//  Estimated: `6196`
// 		// Minimum execution time: 77_070_000 picoseconds.
// 		Weight::from_parts(78_650_000, 0)
// 			.saturating_add(Weight::from_parts(0, 6196))
// 			.saturating_add(T::DbWeight::get().reads(3))
// 			.saturating_add(T::DbWeight::get().writes(4))
// 	}
// 	/// Storage: CollatorSelection Candidates (r:1 w:0)
// 	/// Proof: CollatorSelection Candidates (max_values: Some(1), max_size: Some(48002), added: 48497, mode: MaxEncodedLen)
// 	/// Storage: CollatorSelection LastAuthoredBlock (r:999 w:0)
// 	/// Proof: CollatorSelection LastAuthoredBlock (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
// 	/// Storage: CollatorSelection Invulnerables (r:1 w:0)
// 	/// Proof: CollatorSelection Invulnerables (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
// 	/// Storage: System BlockWeight (r:1 w:1)
// 	/// Proof: System BlockWeight (max_values: Some(1), max_size: Some(48), added: 543, mode: MaxEncodedLen)
// 	/// Storage: System Account (r:995 w:995)
// 	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
// 	/// The range of component `r` is `[1, 1000]`.
// 	/// The range of component `c` is `[1, 1000]`.
// 	fn new_session(r: u32, c: u32, ) -> Weight {
// 		// Proof Size summary in bytes:
// 		//  Measured:  `22921 + c * (97 ±0) + r * (116 ±0)`
// 		//  Estimated: `49487 + c * (2519 ±0) + r * (2602 ±0)`
// 		// Minimum execution time: 27_450_000 picoseconds.
// 		Weight::from_parts(27_820_000, 0)
// 			.saturating_add(Weight::from_parts(0, 49487))
// 			// Standard Error: 1_044_803
// 			.saturating_add(Weight::from_parts(36_626_580, 0).saturating_mul(c.into()))
// 			.saturating_add(T::DbWeight::get().reads(4))
// 			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
// 			.saturating_add(T::DbWeight::get().writes(1))
// 			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
// 			.saturating_add(Weight::from_parts(0, 2519).saturating_mul(c.into()))
// 			.saturating_add(Weight::from_parts(0, 2602).saturating_mul(r.into()))
// 	}
// }
